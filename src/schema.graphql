type Query {
  users(query: String): [User]!
  outfits(query: String): [Outfit]!
  feed(
    filter: String
    skip: Int
    take: Int
    orderBy: OutfitOrderByInput
  ): [Outfit]!

  votes: [Vote]!
  profiles: [Profile]!
}

type Profile {
  id: ID!
  bio: String
  image: String
  user: User!
}

type Feed {
  id: ID!
  outfits: [Outfit!]!
  count: Int
}
type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  age: Int
  outfits: Outfit
  votes: Vote
  profiles: Profile
}

type Outfit {
  id: ID!
  top: String!
  bottom: String!
  shoes: String!
  published: Boolean!
  author: User
  votes: Vote
}

type Vote {
  id: ID!
  outfits: Outfit!
  author: User
}

type Mutation {
  signup(name: String!, email: String!, password: String, age: Int): AuthPayload
  login(email: String!, password: String!): AuthPayload
  updateUser(id: ID!, data: UpdateUserInput!): User!
  deleteUser(id: ID!): User!
  createOutfit(data: CreateOutfit): Outfit!
  deleteOutfit(id: ID!): Outfit!
  vote(outfitId: ID!): Vote
}
type AuthPayload {
  token: String
  user: User
}

type Subscription {
  newOutfit: Outfit
  newVote: Vote
}

# custom inputs. needs to be scalar
input CreateUserInput {
  name: String!
  email: String!
  age: Int
}

input UpdateUserInput {
  name: String
  email: String
  age: Int
}

input OutfitOrderByInput {
  top: Sort
  bottom: Sort
  shoes: Sort
  createdAt: Sort
}

# end of input types

enum Sort {
  asc
  desc
}

input CreateOutfit {
  top: String!
  bottom: String!
  shoes: String!
  published: Boolean
  author: ID!
}
